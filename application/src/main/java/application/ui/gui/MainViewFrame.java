package application.ui.gui;

import application.Application;
import application.ApplicationArguments;
import application.command.ConvertCommand;
import application.command.ConvertCommandData;
import application.command.NewSystemTransformationsCommand;
import application.command.NewSystemTransformationsCommandData;
import application.command.NewTaskDescriptionCommand;
import application.command.NewTaskDescriptionCommandData;
import application.command.PlanCommand;
import application.command.PlanCommandData;
import application.command.VerifyCommand;
import application.command.VerifyCommandData;
import application.event.CommandStatusEvent;
import application.event.HelpMessageEvent;
import application.ui.UserInterface;

import java.util.logging.Level;
import java.util.logging.Logger;

public class MainViewFrame extends javax.swing.JFrame implements UserInterface {

	private static final long serialVersionUID = 514069652804189117L;

	public MainViewFrame() {
		initComponents();
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	// <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
	private void initComponents() {

		jScrollPane1 = new javax.swing.JScrollPane();
		jtParameters = new javax.swing.JTable();
		jScrollPane2 = new javax.swing.JScrollPane();
		jtaLog = new javax.swing.JTextArea();
		jMenuBar1 = new javax.swing.JMenuBar();
		jMenu1 = new javax.swing.JMenu();
		jmiExit = new javax.swing.JMenuItem();
		jMenu2 = new javax.swing.JMenu();
		jmiConvert = new javax.swing.JMenuItem();
		jmiNewTransformations = new javax.swing.JMenuItem();
		jmiNewTask = new javax.swing.JMenuItem();
		jmiPlan = new javax.swing.JMenuItem();
		jmiVerify = new javax.swing.JMenuItem();
		jMenu3 = new javax.swing.JMenu();
		jmiUsage = new javax.swing.JMenuItem();
		jmiAbout = new javax.swing.JMenuItem();

		setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
		setTitle("Process Engineering");
		setName("jfMainView"); // NOI18N

		jtParameters.setModel(new javax.swing.table.DefaultTableModel(
				new Object[][] { { "domain", null }, { "systemTransformationsFile", "systemTransformations.xml" },
						{ "taskDescriptionFile", "taskDescription.xml" }, { "processFile", "process.xml" },
						{ "nodeNetworkFile", "nodeNetwork.xml" } },
				new String[] { "Parameter", "Value" }) {
			private static final long serialVersionUID = 528688809035163326L;
			boolean[] canEdit = new boolean[] { false, true };

			@Override
			public boolean isCellEditable(int rowIndex, int columnIndex) {
				return canEdit[columnIndex];
			}
		});
		jtParameters.getTableHeader().setReorderingAllowed(false);
		jScrollPane1.setViewportView(jtParameters);

		jtaLog.setColumns(20);
		jtaLog.setRows(5);
		jScrollPane2.setViewportView(jtaLog);

		jMenu1.setText("Application");

		jmiExit.setText("Exit");
		jmiExit.addActionListener(new java.awt.event.ActionListener() {
			@Override
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				jmiExitActionPerformed(evt);
			}
		});
		jMenu1.add(jmiExit);

		jMenuBar1.add(jMenu1);

		jMenu2.setText("Commands");

		jmiConvert.setText("Convert");
		jmiConvert.addActionListener(new java.awt.event.ActionListener() {
			@Override
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				jmiConvertActionPerformed(evt);
			}
		});
		jMenu2.add(jmiConvert);

		jmiNewTransformations.setText("New Transformations");
		jmiNewTransformations.addActionListener(new java.awt.event.ActionListener() {
			@Override
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				jmiNewTransformationsActionPerformed(evt);
			}
		});
		jMenu2.add(jmiNewTransformations);

		jmiNewTask.setText("New Task");
		jmiNewTask.addActionListener(new java.awt.event.ActionListener() {
			@Override
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				jmiNewTaskActionPerformed(evt);
			}
		});
		jMenu2.add(jmiNewTask);

		jmiPlan.setText("Plan");
		jmiPlan.addActionListener(new java.awt.event.ActionListener() {
			@Override
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				jmiPlanActionPerformed(evt);
			}
		});
		jMenu2.add(jmiPlan);

		jmiVerify.setText("Verify");
		jmiVerify.addActionListener(new java.awt.event.ActionListener() {
			@Override
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				jmiVerifyActionPerformed(evt);
			}
		});
		jMenu2.add(jmiVerify);

		jMenuBar1.add(jMenu2);

		jMenu3.setText("Help");

		jmiUsage.setText("Usage");
		jmiUsage.addActionListener(new java.awt.event.ActionListener() {
			@Override
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				jmiUsageActionPerformed(evt);
			}
		});
		jMenu3.add(jmiUsage);

		jmiAbout.setText("About");
		jmiAbout.addActionListener(new java.awt.event.ActionListener() {
			@Override
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				jmiAboutActionPerformed(evt);
			}
		});
		jMenu3.add(jmiAbout);

		jMenuBar1.add(jMenu3);

		setJMenuBar(jMenuBar1);

		javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
		getContentPane().setLayout(layout);
		layout.setHorizontalGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE)
				.addComponent(jScrollPane2));
		layout.setVerticalGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(layout.createSequentialGroup()
						.addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 114,
								javax.swing.GroupLayout.PREFERRED_SIZE)
						.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
						.addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 99, Short.MAX_VALUE)));

		pack();
	}// </editor-fold>//GEN-END:initComponents

	@SuppressWarnings("unused")
	private void jmiExitActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_jmiExitActionPerformed
		this.dispose();
	}// GEN-LAST:event_jmiExitActionPerformed

	@SuppressWarnings("unused")
	private void jmiPlanActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_jmiPlanActionPerformed
		PlanCommandData data = new PlanCommandData();
		data.taskDescriptionFile = getModelValue_TaskDescription();
		data.systemTransformationsFile = getModelValue_SystemTransformations();
		data.processFile = getModelValue_Process();
		data.nodeNetworkFile = getModelValue_NodeNetwork();
		application.runCommand(PlanCommand.NAME, data);
	}// GEN-LAST:event_jmiPlanActionPerformed

	@SuppressWarnings("unused")
	private void jmiVerifyActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_jmiVerifyActionPerformed
		VerifyCommandData data = new VerifyCommandData();
		data.taskDescriptionFile = getModelValue_TaskDescription();
		data.systemTransformationsFile = getModelValue_SystemTransformations();
		data.processFile = getModelValue_Process();
		data.nodeNetworkFile = getModelValue_NodeNetwork();
		application.runCommand(VerifyCommand.NAME, data);
	}// GEN-LAST:event_jmiVerifyActionPerformed

	@SuppressWarnings("unused")
	private void jmiNewTaskActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_jmiNewTaskActionPerformed
		NewTaskDescriptionCommandData data = new NewTaskDescriptionCommandData();
		data.taskDescriptionFile = getModelValue_TaskDescription();
		data.domain = getModelValue_Domain();
		application.runCommand(NewTaskDescriptionCommand.NAME, data);
	}// GEN-LAST:event_jmiNewTaskActionPerformed

	@SuppressWarnings("unused")
	private void jmiNewTransformationsActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_jmiNewTransformationsActionPerformed
		NewSystemTransformationsCommandData data = new NewSystemTransformationsCommandData();
		data.systemTransformationsFile = getModelValue_SystemTransformations();
		data.domain = getModelValue_Domain();
		application.runCommand(NewSystemTransformationsCommand.NAME, data);
	}// GEN-LAST:event_jmiNewTransformationsActionPerformed

	@SuppressWarnings("unused")
	private void jmiConvertActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_jmiConvertActionPerformed
		ConvertCommandData data = new ConvertCommandData();
		data.taskDescriptionFile = getModelValue_TaskDescription();
		data.systemTransformationsFile = getModelValue_SystemTransformations();
		data.processFile = getModelValue_Process();
		data.nodeNetworkFile = getModelValue_NodeNetwork();
		application.runCommand(ConvertCommand.NAME, data);
	}// GEN-LAST:event_jmiConvertActionPerformed

	@SuppressWarnings("unused")
	private void jmiUsageActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_jmiUsageActionPerformed
		try {
			application.showHelp();
		} catch (Exception ex) {
			Logger.getLogger(MainViewFrame.class.getName()).log(Level.SEVERE, null, ex);
		}
	}// GEN-LAST:event_jmiUsageActionPerformed

	@SuppressWarnings("unused")
	private void jmiAboutActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_jmiAboutActionPerformed
		java.awt.EventQueue.invokeLater(new Runnable() {
			@Override
			public void run() {
				new AboutFrame().setVisible(true);
			}
		});
	}// GEN-LAST:event_jmiAboutActionPerformed

	public static void main(String args[]) {
		java.awt.EventQueue.invokeLater(new Runnable() {
			@Override
			public void run() {
				new MainViewFrame().setVisible(true);
			}
		});
	}

	// Variables declaration - do not modify//GEN-BEGIN:variables
	private javax.swing.JMenu jMenu1;
	private javax.swing.JMenu jMenu2;
	private javax.swing.JMenu jMenu3;
	private javax.swing.JMenuBar jMenuBar1;
	private javax.swing.JScrollPane jScrollPane1;
	private javax.swing.JScrollPane jScrollPane2;
	private javax.swing.JMenuItem jmiAbout;
	private javax.swing.JMenuItem jmiConvert;
	private javax.swing.JMenuItem jmiExit;
	private javax.swing.JMenuItem jmiNewTask;
	private javax.swing.JMenuItem jmiNewTransformations;
	private javax.swing.JMenuItem jmiPlan;
	private javax.swing.JMenuItem jmiUsage;
	private javax.swing.JMenuItem jmiVerify;
	private javax.swing.JTable jtParameters;
	private javax.swing.JTextArea jtaLog;
	// End of variables declaration//GEN-END:variables

	private Application application = new Application();

	@Override
	public void setApplication(Application application) {
		this.application = application;
	}

	public void updateComponents() {
		ApplicationArguments appArgs = application.getArguments();
		setModelValue_Domain(appArgs.getArgument_d("unknown"));
		setModelValue_SystemTransformations(appArgs.getArgument_st("systemTransformations.xml"));
		setModelValue_TaskDescription(appArgs.getArgument_td("taskDescription.xml"));
		setModelValue_Process(appArgs.getArgument_p("process.xml"));
		setModelValue_NodeNetwork(appArgs.getArgument_nn("nodeNetwork.xml"));
	}

	private void setModelValue_Domain(String value) {
		jtParameters.getModel().setValueAt(value, 0, 1);
	}

	private String getModelValue_Domain() {
		return (String) jtParameters.getModel().getValueAt(0, 1);
	}

	private void setModelValue_SystemTransformations(String value) {
		jtParameters.getModel().setValueAt(value, 1, 1);
	}

	private String getModelValue_SystemTransformations() {
		return (String) jtParameters.getModel().getValueAt(1, 1);
	}

	private void setModelValue_TaskDescription(String value) {
		jtParameters.getModel().setValueAt(value, 2, 1);
	}

	private String getModelValue_TaskDescription() {
		return (String) jtParameters.getModel().getValueAt(2, 1);
	}

	private void setModelValue_Process(String value) {
		jtParameters.getModel().setValueAt(value, 3, 1);
	}

	private String getModelValue_Process() {
		return (String) jtParameters.getModel().getValueAt(3, 1);
	}

	private void setModelValue_NodeNetwork(String value) {
		jtParameters.getModel().setValueAt(value, 4, 1);
	}

	private String getModelValue_NodeNetwork() {
		return (String) jtParameters.getModel().getValueAt(4, 1);
	}

	@Override
	public void notifyHelpMessage(HelpMessageEvent event) {
		jtaLog.append(event.message);
		jtaLog.append("\n");
	}

	@Override
	public void notifyCommandStatus(CommandStatusEvent event) {
		jtaLog.append(event.message);
		jtaLog.append("\n");
	}

	public static void initializeLookAndFeel() throws Exception {
		for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
			if ("Nimbus".equals(info.getName())) {
				javax.swing.UIManager.setLookAndFeel(info.getClassName());
				break;
			}
		}
	}

	@Override
	public void run() throws Exception {
		initializeLookAndFeel();
		updateComponents();
		setVisible(true);
	}
}
